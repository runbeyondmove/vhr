<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.javaboy.vhr.mapper.EmployeeremoveMapper" >
  <resultMap id="BaseResultMap" type="org.javaboy.vhr.model.Employeeremove" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="eid" property="eid" jdbcType="INTEGER" />
    <result column="afterDepId" property="afterdepid" jdbcType="INTEGER" />
    <result column="afterJobId" property="afterjobid" jdbcType="INTEGER" />
    <result column="removeDate" property="removedate" jdbcType="DATE" />
    <result column="reason" property="reason" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, eid, afterDepId, afterJobId, removeDate, reason, remark
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from employeeremove
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from employeeremove
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.javaboy.vhr.model.Employeeremove" >
    insert into employeeremove (id, eid, afterDepId, 
      afterJobId, removeDate, reason, 
      remark)
    values (#{id,jdbcType=INTEGER}, #{eid,jdbcType=INTEGER}, #{afterdepid,jdbcType=INTEGER}, 
      #{afterjobid,jdbcType=INTEGER}, #{removedate,jdbcType=DATE}, #{reason,jdbcType=VARCHAR}, 
      #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.javaboy.vhr.model.Employeeremove" >
    insert into employeeremove
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="eid != null" >
        eid,
      </if>
      <if test="afterdepid != null" >
        afterDepId,
      </if>
      <if test="afterjobid != null" >
        afterJobId,
      </if>
      <if test="removedate != null" >
        removeDate,
      </if>
      <if test="reason != null" >
        reason,
      </if>
      <if test="remark != null" >
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="eid != null" >
        #{eid,jdbcType=INTEGER},
      </if>
      <if test="afterdepid != null" >
        #{afterdepid,jdbcType=INTEGER},
      </if>
      <if test="afterjobid != null" >
        #{afterjobid,jdbcType=INTEGER},
      </if>
      <if test="removedate != null" >
        #{removedate,jdbcType=DATE},
      </if>
      <if test="reason != null" >
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.javaboy.vhr.model.Employeeremove" >
    update employeeremove
    <set >
      <if test="eid != null" >
        eid = #{eid,jdbcType=INTEGER},
      </if>
      <if test="afterdepid != null" >
        afterDepId = #{afterdepid,jdbcType=INTEGER},
      </if>
      <if test="afterjobid != null" >
        afterJobId = #{afterjobid,jdbcType=INTEGER},
      </if>
      <if test="removedate != null" >
        removeDate = #{removedate,jdbcType=DATE},
      </if>
      <if test="reason != null" >
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.javaboy.vhr.model.Employeeremove" >
    update employeeremove
    set eid = #{eid,jdbcType=INTEGER},
      afterDepId = #{afterdepid,jdbcType=INTEGER},
      afterJobId = #{afterjobid,jdbcType=INTEGER},
      removeDate = #{removedate,jdbcType=DATE},
      reason = #{reason,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <resultMap id="getAllResultMap" type="org.javaboy.vhr.model.EmployeeremoveVo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="eid" jdbcType="INTEGER" property="eid" />
    <result column="afterDepId" jdbcType="INTEGER" property="afterDepId" />
    <result column="afterJobId" jdbcType="INTEGER" property="afterJobId" />
    <result column="removeDate" jdbcType="DATE" property="removeDate" />
    <result column="reason" jdbcType="VARCHAR" property="reason" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <association property="department" javaType="org.javaboy.vhr.model.Department">
      <id property="id" column="did"/>
      <result property="name" column="dname"/>
    </association>
    <association property="position" javaType="org.javaboy.vhr.model.Position">
      <id property="id" column="pid"/>
      <result property="name" column="pname"/>
    </association>
  </resultMap>
  <delete id="deleteMove">
    DELETE FROM employeeremove WHERE id IN
    <foreach collection="ids" separator="," item="id" open="(" close=")">
      #{id}
    </foreach>
  </delete>
  <select id="getAllMove" resultMap="getAllResultMap">
    select et.* from (select e.*,
    d.`id` as did,d.`name` as dname ,
    p.`id` as pid,p.`name` as pname
    from employeeremove e,department d ,position p
    where e.`afterDepId` = d.`id` and e.`afterJobId` = p.`id`) et left join employee e on et.eid = e.id
    where e.name like concat('%',#{keywords},'%')
    <if test="start!=null and size!=null">
      order by et.id limit #{start},#{size}
    </if>
  </select>
  <select id="selectByKey" resultMap="getAllResultMap">
    select et.* from (select e.*,
    d.`id` as did,d.`name` as dname ,
    p.`id` as pid,p.`name` as pname
    from employeeremove e,department d ,position p
    where e.`afterDepId` = d.`id` and e.`afterJobId` = p.`id`) et left join employee e on et.eid = e.id
    where e.name like concat('%',#{keywords},'%')
    <if test="start!=null and size!=null">
      order by et.id limit #{start},#{size}
    </if>
  </select>
  <select id="getCountByKeywords" resultType="Long">
    select  count(*) from employeeremove et left join employee e on et.eid = e.id
    where e.name like concat('%',#{keywords},'%')
  </select>
</mapper>